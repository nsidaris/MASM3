Microsoft (R) Macro Assembler Version 6.14.8444		    04/16/17 13:53:10
String1.asm						     Page 1 - 1



				;*************************************************************************************
				; Program Name:  String1.asm
				; Programmer:    Nick Sidaris
				; Class:         CS1C
				; Date:          April 11, 2017
				; Purpose:
				;        Define the methods for the String class
				;
					.486
					.model flat
					.stack 100h
					
					ascint32	PROTO Near32 stdcall, lpStringToConvert:dword 
				 	intasc32	PROTO Near32 stdcall, lpStringToHold:dword, dval:dword
					getstring	PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					putstring 	PROTO Near32 stdcall, lpStringToPrint:dword
					memoryallocBailey PROTO Near32 stdcall, dNumBytes:dword  ;returns address ofmemory
					;extern String_length:near32
 00000000			.data
 00000000  00000014 [		strInput	byte	20 dup(?)	
	    00
	   ]
 00000014 0A 00			strNewline 	        byte 10,0 ;newline constant
 00000016 00000000		strOutput dword ?
 0000001A 00000000		dOffset   dword ?

 0000001E 0D 0A 50 61 72	strTest1 byte 13,10,  "Parsing something for word 1", 13,10,  0
	   73 69 6E 67 20
	   73 6F 6D 65 74
	   68 69 6E 67 20
	   66 6F 72 20 77
	   6F 72 64 20 31
	   0D 0A 00
 0000003F 0D 0A 50 61 72	strTest2 byte 13,10, "Parsing something for word 2", 13,10,  0
	   73 69 6E 67 20
	   73 6F 6D 65 74
	   68 69 6E 67 20
	   66 6F 72 20 77
	   6F 72 64 20 32
	   0D 0A 00

 00000000				.code

					
				COMMENT %			;terminating symbol for the block is  								
				 ****************************************************************************************
				 * Name: String_length																	*
				 * Purpose:																				*
				 *		The purpose of the method is to determine the number of characters in a string	*
				 *																						*
				 * Date created: October 1, 2016														*
				 * Date last modified: October 19, 2016													*
				 *																						*																	*
				 *																						*
				 *   @param  lpString1:dword  															*
				 *   @return len:dword  the length of a the string										*
				 ***************************************************************************************%
				;COMMENT %
 00000000			String_length	proc Near32
 00000000  55				push ebp					;preserve base register
 00000001  8B EC			mov ebp,esp					;set new stack frame
					;enter 0,0 
 00000003  53				push ebx					;preserve used registers
 00000004  56				push esi
 00000005  8B 5D 08			mov ebx,[ebp+8]				;ebx-> 1st string
 00000008  BE 00000000			mov esi,0					;esi indexes into the strings
					
 0000000D			stLoop:
 0000000D  80 3C 1E 00				cmp byte ptr[ebx+esi],0	;reached the end of the string
 00000011  74 03				je finished				;if yes, done in here
 00000013  46					inc esi					;otherwise, continue to next character
 00000014  EB F7				jmp stLoop				;  until you hit the NULL character
 00000016			finished:

 00000016  8B C6			mov eax,esi					;returns the length in EAX
 00000018  5E				pop esi			;restore preserved registers
 00000019  5B				pop ebx
 0000001A  5D				pop ebp
					;leave
 0000001B  C3				RET
 0000001C			String_length endp
				 ; end of comment block

				 COMMENT %			;terminating symbol for the block is  								
				 ****************************************************************************************
				 * Name: String_equals																    *
				 * Purpose:																				*
				 *		See if 2 strings are equal                                                  	*
				 *																						*
				 * Date created: October 1, 2016														*
				 * Date last modified: October 19, 2016													*
				 *																						*
				 * Notes on specifications, special algorithms, and assumptions:						*
				 *   notes go here. Omit these lines if there is no special algorithm or there were no	*
				 *   assumptions.																		*
				 *																						*
				 *   @param  lpString1:dword, lpString2:dword  											*
				 *   @return equal:byte  whether or not the strings are equal							*
				 ***************************************************************************************%
 0000001C			String_equals  proc Near32

				;enter 0,0  ;start method - EBP is now the stack frame
 0000001C  55				push ebp					;preserve base register
 0000001D  8B EC			mov ebp,esp	      ; new stack frame
 0000001F  53				push ebx 
 00000020  51				push ecx   ;saving registers
 00000021  56				push esi
 00000022  52				push edx 
					
 00000023  FF 75 08			push [ebp + 8]     ;push first string onto stack(ebp + 4 is return address )
 00000026  E8 FFFFFFD5			call String_length 
 0000002B  8B D8			mov ebx, eax   ;save the length

					
 0000002D  FF 75 0C			push [ebp + 12] ; push second string onto stack
 00000030  E8 FFFFFFCB			call String_length
 00000035  8B D0			mov edx, eax
					
 00000037  3B DA			cmp ebx, edx
 00000039  74 10			je  EvenLength
 0000003B  75 00			jne UnevenLength
				; accounts for uneven length or character mismatch
 0000003D			UnevenLength:
 0000003D  B8 00000000			mov eax, 0
 00000042  EB 25			jmp finish
					
 00000044			equalStrings:

 00000044  B8 00000001			mov eax, 1
 00000049  EB 1E			jmp finish
 0000004B			EvenLength:
 0000004B  8B CA			mov ecx, edx         ;use to store length of the strings and serve as upper loop boundary
 0000004D  8B 55 08			mov edx, [ebp + 8]   ;store string 1
 00000050  8B 5D 0C			mov ebx, [ebp + 12]  ;store string 2
 00000053  BE 00000000			mov esi, 0
					
 00000058			checkChar:
 00000058  8A 04 16			mov al, [edx + esi]
 0000005B  8A 24 1E			mov ah, [ebx + esi]
 0000005E  38 C4			cmp ah, al
 00000060  75 DB			jne UnevenLength
 00000062  46				inc ESI
 00000063  3B F1			cmp esi, ecx ; we have reached the end of the string and they are the same at this point
 00000065  74 DD			je equalStrings
 00000067  75 EF			jne checkChar
					

					
 00000069			finish:
 00000069  5A				pop edx
 0000006A  5E				pop esi ;restore registers
 0000006B  59				pop ecx
 0000006C  5B				pop ebx

					
 0000006D  83 C4 08			add esp, 8
 00000070  5D				pop ebp	

					
					;leave      ;Finish method
 00000071  C3				RET

 00000072			String_equals endp


				 COMMENT %			;terminating symbol for the block is  								
				 ****************************************************************************************
				 * Name: String_equalsIgnoreCase												        *
				 * Purpose:																				*
				 *		See if 2 strings are equal, ignores upper vs lowercase                        	*
				 *																						*
				 * Date created: October 1, 2016														*
				 * Date last modified: October 19, 2016													*
				 *																						*
				 * Notes on specifications, special algorithms, and assumptions:						*
				 *   notes go here. Omit these lines if there is no special algorithm or there were no	*
				 *   assumptions.																		*
				 *																						*
				 *   @param  lpString1:dword, lpString2:dword  											*
				 *   @return equal:byte  whether or not the strings are equal							*
				 ***************************************************************************************%

 00000072			String_equalsIgnoreCase proc Near32

				;enter 0,0  ;start method - EBP is now the stack frame
 00000072  55				push ebp					;preserve base register
 00000073  8B EC			mov ebp,esp	      ; new stack frame
 00000075  53				push ebx 
 00000076  51				push ecx   ;saving registers
 00000077  56				push esi
 00000078  52				push edx 
					
 00000079  FF 75 08			push [ebp + 8]     ;push first string onto stack(ebp + 4 is return address )
 0000007C  E8 FFFFFF7F			call String_length 
 00000081  8B D8			mov ebx, eax   ;save the length

					
 00000083  FF 75 0C			push [ebp + 12] ; push second string onto stack
 00000086  E8 FFFFFF75			call String_length
 0000008B  8B D0			mov edx, eax
					
 0000008D  3B DA			cmp ebx, edx
 0000008F  74 10			je  EvenLength
 00000091  75 00			jne UnevenLength
				; accounts for uneven length or character mismatch
 00000093			UnevenLength:
 00000093  B8 00000000			mov eax, 0
 00000098  EB 3C			jmp finish
					
 0000009A			equalStrings:

 0000009A  B8 00000001			mov eax, 1
 0000009F  EB 35			jmp finish
 000000A1			EvenLength:
 000000A1  8B CA			mov ecx, edx         ;use to store length of the strings and serve as upper loop boundary
 000000A3  8B 55 08			mov edx, [ebp + 8]   ;store string 1
 000000A6  8B 5D 0C			mov ebx, [ebp + 12]  ;store string 2
 000000A9  BE 00000000			mov esi, 0
					
 000000AE			checkChar1:
 000000AE  8A 04 16			mov al, [edx + esi]

 000000B1			lower1:
 000000B1  3C 40			cmp al, 64
 000000B3  7C 06			jl checkChar2
 000000B5  3C 5B			cmp al, 91
 000000B7  7F 02			jg checkChar2
					
					;Invoke putString, ADDR strTest1
 000000B9  04 20			add al, 32

 000000BB			checkChar2:
 000000BB  8A 24 1E			mov ah, [ebx + esi]
 000000BE			lower2:
 000000BE  80 FC 40			cmp ah, 64
 000000C1  7C 08			jl compare
 000000C3  80 FC 5B			cmp ah, 91
 000000C6  7F 03			jg compare

					;Invoke putString, ADDR strTest2
 000000C8  80 C4 20			add ah, 32
 000000CB			compare:	;
 000000CB  38 C4			cmp ah, al
 000000CD  75 C4			jne UnevenLength
 000000CF  46				inc ESI
 000000D0  3B F1			cmp esi, ecx ; we have reached the end of the string and they are the same at this point
 000000D2  74 C6			je equalStrings
 000000D4  75 D8			jne checkChar1
					

					
 000000D6			finish:
 000000D6  5A				pop edx
 000000D7  5E				pop esi ;restore registers
 000000D8  59				pop ecx
 000000D9  5B				pop ebx

					
 000000DA  83 C4 08			add esp, 8
 000000DD  5D				pop ebp	

					
					;leave      ;Finish method
 000000DE  C3				RET
					
					
 000000DF			String_equalsIgnoreCase endp	

				 COMMENT %			;terminating symbol for the block is  								
				 ****************************************************************************************
				 * Name: String_copy															        *
				 * Purpose:																				*
				 *		Copies a string                                                             	*
				 *																						*
				 * Date created: October 1, 2016														*
				 * Date last modified: October 19, 2016													*
				 *																						*
				 * Notes on specifications, special algorithms, and assumptions:						*
				 *   notes go here. Omit these lines if there is no special algorithm or there were no	*
				 *   assumptions.																		*
				 *																						*
				 *   @param  lpString1:dword										                    *
				 *   @return string:dword	                                        					*
				 ***************************************************************************************%
 000000DF			String_copy proc Near32

 000000DF  55				push ebp					;preserve base register
 000000E0  8B EC			mov ebp,esp	      ; new stack frame
 000000E2  53				push ebx 
 000000E3  51				push ecx   ;saving registers
 000000E4  56				push esi
 000000E5  52				push edx 
					

 000000E6  FF 75 08			push [ebp + 8] ;push the string to the stack
 000000E9  E8 FFFFFF12			call String_length 
 000000EE  8B C8			mov ecx, eax   ;save the length of the string
 000000F0  83 C4 04			add esp, 4
	
					
					Invoke memoryallocBailey, ecx
 000000F9  BE 00000000			mov esi, 0
					
 000000FE  8B 5D 08			mov ebx, [ebp + 8]
 00000101  8B D0			mov edx, eax
 00000103			buildString:
					
 00000103  8A 04 1E			mov al, [ebx + esi]
 00000106  88 04 16			mov [EDX + ESI], al
 00000109  46				inc esi
 0000010A  E2 F7			loop buildString
					
						
					
 0000010C  8B C2			mov eax, edx
 0000010E  5A				pop edx
					
 0000010F  5E				pop esi ;restore registers
 00000110  59				pop ecx
 00000111  5B				pop ebx
 00000112  5D				pop ebp

 00000113  C3				RET

 00000114			String_copy endp
				 COMMENT %			;terminating symbol for the block is  								
				 ****************************************************************************************
				 * Name: String_substring_1														        *
				 * Purpose:																				*
				 *		Returns a section of a string                                                 	*
				 *																						*
				 * Date created: October 1, 2016														*
				 * Date last modified: October 19, 2016													*
				 *																						*
				 * Notes on specifications, special algorithms, and assumptions:						*
				 *   notes go here. Omit these lines if there is no special algorithm or there were no	*
				 *   assumptions.																		*
				 *																						*
				 *   @param  lpString1:dword	                                                        *
				 *   @param  beginIndex:int start index                                                 *
				 *	 @param endIndex:int    end index                                                   *
				 *   @return string:dword	                                     					    *
				 ***************************************************************************************%
 00000114			String_substring_1 proc Near32
 00000114  55				push ebp					;preserve base register
 00000115  8B EC			mov ebp,esp	      ; new stack frame
 00000117  53				push ebx 
 00000118  51				push ecx   ;saving registers
 00000119  56				push esi
 0000011A  52				push edx    ; new stack frame
					

					
 0000011B  8B 5D 08			mov ebx, [ebp + 8] ; save string
 0000011E  8B 55 0C			mov edx, [ebp + 12] ;start index
 00000121  8B 4D 10			mov ecx, [ebp + 16] ;end index
					;make sure they are gud
 00000124  83 C1 01			add ecx, 1 ; account for the null char
 00000127  2B CA			sub ecx, edx ; ecx is the length of the substring
 00000129  8B F2			mov esi, edx ;save start index to esi
					

					Invoke memoryallocBailey, ecx  ;allocate memory
					
					
 00000131  89 35 0000001A R		mov dOffset, esi  ;find the offset for copying 
 00000137  8B D0			mov edx, eax
 00000139			buildString:

 00000139  8A 04 1E			mov al, [ebx + esi]  ;get the first character
 0000013C  56				push esi
 0000013D  2B 35 0000001A R		sub esi, dOffset     ;calc the offset to save the character
 00000143  88 04 16			mov [EDX + ESI], al
 00000146  5E				pop esi
 00000147  46				inc esi      
 00000148  E2 EF			loop buildString   ;loop until finished with 
					
						
 0000014A  B0 00			mov al, 0 ;add dat Null
					
 0000014C  88 04 16			mov [EDX + ESI], al 
 0000014F  8B C2			mov eax, edx
					
					

					
 00000151  5A				pop edx
 00000152  5E				pop esi ;restore registers
 00000153  59				pop ecx
 00000154  5B				pop ebx
 00000155  5D				pop ebp

 00000156  C3				ret
 00000157			String_substring_1 endp




 00000157			String_substring_2 proc Near32
 00000157  55				push ebp					;preserve base register
 00000158  8B EC			mov ebp,esp	      ; new stack frame
 0000015A  53				push ebx 
 0000015B  51				push ecx   ;saving registers
 0000015C  56				push esi
 0000015D  52				push edx    ; new stack frame

 0000015E  FF 75 08			push [ebp + 8]
 00000161  E8 FFFFFE9A			call String_length
 00000166  83 C4 04			add esp, 4
					;need to make sure start index is greater than length of the string
					
					
					;use substring 1 to get the substring, use length of the string as teh 
 00000169  50				push eax
 0000016A  FF 75 0C			push [ebp + 12]
 0000016D  FF 75 08			push [ebp + 8 ]
 00000170  E8 FFFFFF9F			call String_substring_1
 00000175  83 C4 0C			add esp, 12
					
					
 00000178  5A				pop edx
 00000179  5E				pop esi ;restore registers
 0000017A  59				pop ecx
 0000017B  5B				pop ebx
 0000017C  5D				pop ebp

 0000017D  C3				ret

 0000017E			String_substring_2 endp




 0000017E			String_charAt proc Near32

 0000017E  55				push ebp					;preserve base register
 0000017F  8B EC			mov ebp,esp	      ; new stack frame
 00000181  53				push ebx 
 00000182  51				push ecx   ;saving registers
 00000183  56				push esi
 00000184  52				push edx    ; new stack frame
					
					
					
 00000185  FF 75 0C			push [ebp + 12]
 00000188  FF 75 0C			push [ebp + 12]
 0000018B  FF 75 08			push [ebp +8]
 0000018E  E8 FFFFFF81			call String_substring_1
 00000193  83 C4 0C			add esp, 12

					
					
					

 00000196  5A				pop edx
 00000197  5E				pop esi ;restore registers
 00000198  59				pop ecx
 00000199  5B				pop ebx
 0000019A  5D				pop ebp

 0000019B  C3				ret
 0000019C			String_charAt endp




 0000019C			String_startsWith_1 proc Near32

 0000019C  55				push ebp					;preserve base register
 0000019D  8B EC			mov ebp,esp	      ; new stack frame
 0000019F  53				push ebx 
 000001A0  51				push ecx   ;saving registers
 000001A1  56				push esi
 000001A2  52				push edx    ; new stack frame

 000001A3  8B 5D 10			mov ebx, [ebp + 16]  ;save start position
 000001A6  FF 75 0C			push [ebp + 12] 
 000001A9  E8 FFFFFE52			call String_length ; get length of the prefix

					
 000001AE  83 C4 04			add esp, 4
 000001B1  03 C3			add eax, ebx 
 000001B3  83 E8 01			sub eax, 1    ;eax should now have the end pos

					
					
 000001B6  50				push eax
 000001B7  53				push ebx   ;push the start pos
 000001B8  FF 75 08			push [ebp+8] 
					
 000001BB  E8 FFFFFF54			call String_substring_1
 000001C0  83 C4 0C			add esp, 12

					
					
 000001C3  50				push EAX
 000001C4  FF 75 0C			push [ebp + 12]
 000001C7  E8 FFFFFE50			call String_equals
 000001CC  83 C4 08			add esp, 8
					
					

 000001CF  5A				pop edx
 000001D0  5E				pop esi ;restore registers
 000001D1  59				pop ecx
 000001D2  5B				pop ebx
 000001D3  5D				pop ebp

 000001D4  C3				ret
 000001D5			String_startsWith_1 endp

 000001D5			String_startsWith_2 proc Near32

 000001D5  55				push ebp					;preserve base register
 000001D6  8B EC			mov ebp,esp	      ; new stack frame
 000001D8  53				push ebx 
 000001D9  51				push ecx   ;saving registers
 000001DA  56				push esi
 000001DB  52				push edx    ; new stack frame
					
					
 000001DC  B8 00000000			mov eax, 0
 000001E1  50				push eax
 000001E2  FF 75 0C			push [ebp + 12]
 000001E5  FF 75 08			push [ebp +  8]
 000001E8  E8 FFFFFFAF			call String_startsWith_1
 000001ED  83 C4 0C			add esp, 12
					
					
					
 000001F0  5A				pop edx
 000001F1  5E				pop esi ;restore registers
 000001F2  59				pop ecx
 000001F3  5B				pop ebx
 000001F4  5D				pop ebp

 000001F5  C3				ret

 000001F6			String_startsWith_2 endp

 000001F6			String_endsWith proc Near32


 000001F6  55				push ebp					;preserve base register
 000001F7  8B EC			mov ebp,esp	      ; new stack frame
 000001F9  53				push ebx 
 000001FA  51				push ecx   ;saving registers
 000001FB  56				push esi
 000001FC  52				push edx    ; new stack frame
					
					
 000001FD  FF 75 08			push [ebp + 8]
 00000200  E8 FFFFFDFB			call String_length  ;get the length of the main string
 00000205  83 C4 04			add esp, 4
 00000208  8B D8			mov ebx, eax
					
 0000020A  FF 75 0C			push [ebp + 12]
 0000020D  E8 FFFFFDEE			call String_length  ;get the length of the suffix
					
 00000212  83 C4 04			add esp, 4
					
					;error check
					
					
 00000215  2B D8			sub ebx, eax ; find the start indez
					 
 00000217  53				push ebx 
 00000218  FF 75 08			push [ebp + 8]
 0000021B  E8 FFFFFF37			call String_substring_2
 00000220  83 C4 08			add esp, 8
					
					
 00000223  50				push eax
 00000224  FF 75 0C			push [ebp + 12]
 00000227  E8 FFFFFDF0			call String_equals
 0000022C  83 C4 08			add esp, 8
					


 0000022F  5A				pop edx
 00000230  5E				pop esi ;restore registers
 00000231  59				pop ecx
 00000232  5B				pop ebx
 00000233  5D				pop ebp

 00000234  C3				ret

 00000235			String_endsWith endp



				end
Microsoft (R) Macro Assembler Version 6.14.8444		    04/16/17 13:53:10
String1.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000060 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000235 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

String_charAt  . . . . . . . . .	P Near	 0000017E _TEXT	Length= 0000001E Public
String_copy  . . . . . . . . . .	P Near	 000000DF _TEXT	Length= 00000035 Public
  buildString  . . . . . . . . .	L Near	 00000103 _TEXT	
String_endsWith  . . . . . . . .	P Near	 000001F6 _TEXT	Length= 0000003F Public
String_equalsIgnoreCase  . . . .	P Near	 00000072 _TEXT	Length= 0000006D Public
  UnevenLength . . . . . . . . .	L Near	 00000093 _TEXT	
  equalStrings . . . . . . . . .	L Near	 0000009A _TEXT	
  EvenLength . . . . . . . . . .	L Near	 000000A1 _TEXT	
  checkChar1 . . . . . . . . . .	L Near	 000000AE _TEXT	
  lower1 . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  checkChar2 . . . . . . . . . .	L Near	 000000BB _TEXT	
  lower2 . . . . . . . . . . . .	L Near	 000000BE _TEXT	
  compare  . . . . . . . . . . .	L Near	 000000CB _TEXT	
  finish . . . . . . . . . . . .	L Near	 000000D6 _TEXT	
String_equals  . . . . . . . . .	P Near	 0000001C _TEXT	Length= 00000056 Public
  UnevenLength . . . . . . . . .	L Near	 0000003D _TEXT	
  equalStrings . . . . . . . . .	L Near	 00000044 _TEXT	
  EvenLength . . . . . . . . . .	L Near	 0000004B _TEXT	
  checkChar  . . . . . . . . . .	L Near	 00000058 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000069 _TEXT	
String_length  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001C Public
  stLoop . . . . . . . . . . . .	L Near	 0000000D _TEXT	
  finished . . . . . . . . . . .	L Near	 00000016 _TEXT	
String_startsWith_1  . . . . . .	P Near	 0000019C _TEXT	Length= 00000039 Public
String_startsWith_2  . . . . . .	P Near	 000001D5 _TEXT	Length= 00000021 Public
String_substring_1 . . . . . . .	P Near	 00000114 _TEXT	Length= 00000043 Public
  buildString  . . . . . . . . .	L Near	 00000139 _TEXT	
String_substring_2 . . . . . . .	P Near	 00000157 _TEXT	Length= 00000027 Public
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
dOffset  . . . . . . . . . . . .	DWord	 0000001A _DATA	
strInput . . . . . . . . . . . .	Byte	 00000000 _DATA	
strNewline . . . . . . . . . . .	Byte	 00000014 _DATA	
strOutput  . . . . . . . . . . .	DWord	 00000016 _DATA	
strTest1 . . . . . . . . . . . .	Byte	 0000001E _DATA	
strTest2 . . . . . . . . . . . .	Byte	 0000003F _DATA	

	   0 Warnings
	   0 Errors
