Microsoft (R) Macro Assembler Version 6.14.8444		    04/18/17 22:41:26
MASM3.asm						     Page 1 - 1


				;******************************************************************************************
				;Name: 		Daniel Crawford
				;Program: 	proj3Driver_string1.asm
				;Class: 	CSCI 2160-001
				;Lab: 		Proj3Driver_String1
				;Date: 		October 20, 2016
				;Purpose:
				;		To test methods a set of given test values for string1.asm and report returned
				;			values.
				;******************************************************************************************
					.486										;X86 INSTRUCTION SET
					.MODEL flat									;USE ABSOLUTE ADDRESSES
					.STACK 100h									;SET ASIDE 256 BYTES FOR THE STACK 

					ExitProcess PROTO Near32 stdcall, dwExitCode:dword
					intasc32 	PROTO Near32 stdcall, lpStringToHold:dword, dVal:dword
					ascint32 	PROTO Near32 stdcall, lpStringOfNumericChars:dword
					getch	 	PROTO Near32 stdcall
					getche		PROTO Near32 stdcall
					putch 		PROTO Near32 stdcall, bChar:byte
					putstring 	PROTO Near32 stdcall, lpStringToPrint:dword
					getstring 	PROTO Near32 stdcall, lpStringToGet:dword,	dLength:dword
					hexToChar 	PROTO Near32 stdcall, lpDestStr:dword,lpSourceStr:dword,dLen:dword
					memoryallocBailey PROTO Near32 stdcall, dNumBytes:dword  ;returns address ofmemory
				; Methods from string1.asm
					EXTERN String_length:PROC
					EXTERN String_equals:PROC
					EXTERN String_equalsIgnoreCase: PROC
					EXTERN String_copy: PROC
					EXTERN String_substring_1: PROC
					EXTERN String_substring_2: PROC
					EXTERN String_charAt: PROC
					EXTERN String_startsWith_1: PROC
					EXTERN String_startsWith_2: PROC
					EXTERN String_endsWith: PROC
					
					
 00000000				.data
				; Constant Values
 = 0000001E			STR_MAX   = 30				;Max string length for entered values
 = 0000002C			COMMA_KEY = 02Ch			;value for the Comma key
 = 0000000D			ENTER_KEY = 13				;value for the enter key

				; String Constant TESTVALS
 00000000 47 6F 6C 64 65	strTest1            byte  "Golden", 0
	   6E 00
 00000007 67 6F 6C 64 65	strTest2            byte  "golden", 0
	   6E 00
 0000000E 65 6E 00		strTest3			byte "en", 0
 00000011  0000001F [		strTest4			byte (STR_MAX + 1) dup(?)
	    00
	   ]
 00000030 67 6F 6C 00		strTest5			byte "gol",0
 00000034 47 6F 6C 00		strTest6			byte "Gol",0
 00000038 00000000		strOutput           dword ?
 0000003C 00000001		dIndex1             dword 1
 00000040 00000064		dIndex2				dword 100


											;--- Insert test values here seperated with commas --- 
 00000044 56 40 31 75 65	strTestVals			byte	"V@1ues,string,not string,,!@#$%^^,MiXed-Up V@1ues"
	   73 2C 73 74 72
	   69 6E 67 2C 6E
	   6F 74 20 73 74
	   72 69 6E 67 2C
	   2C 21 40 23 24
	   25 5E 5E 2C 4D
	   69 58 65 64 2D
	   55 70 20 56 40
	   31 75 65 73
											;-----------------------------------------------------
 00000075 00000031		iTestValsLength		dword	($-strTestVals)			;Length of TestVals in bytes
				; Operational Storage
 00000079  0000001F [		strValTemp1			byte	(STR_MAX + 1) dup(?)	;Storage for current test string
	    00
	   ]
 00000098  0000001F [		strValTemp2			byte	(STR_MAX + 1) dup(?)	;Storage for user entered string
	    00
	   ]
 000000B7  0000000C [		strValTemp3			byte	12 dup(?)				;Storage for user entered string number
	    00
	   ]
 000000C3 00000000		numValTemp1			dword	?						;Storage for numeric parameter
 000000C7 00000000		numValTemp2			dword	?						;Storage for numeric parameter
 000000CB 00000000		dReturnedVal		dword	?						;Storage for returned value
 000000CF  00000009 [		strReturnedVal		byte	9 dup(?)				;Storage for returned value as a string
	    00
	   ]
				; String Constant PROMPTS
 000000D8 0A 0D 0A 0D 0A	strPromptExit		byte 	10,13,10,13,10,13,"Thank you for using my program! Hope you f",
	   0D 54 68 61 6E
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 21 20 48 6F
	   70 65 20 79 6F
	   75 20 66 6F 75
	   6E 64 20 74 68
	   69 73 20 68 65
	   6C 70 66 75 6C
	   21 0A 0D 00
												"ound this helpful!",10,13,0
 0000011D 0A 0D 0A 0D 20	strPromptRepeat		byte	10,13,10,13,"  --- Press <ENTER> to REPEAT test or ANOTHER KE",
	   20 2D 2D 2D 20
	   50 72 65 73 73
	   20 3C 45 4E 54
	   45 52 3E 20 74
	   6F 20 52 45 50
	   45 41 54 20 74
	   65 73 74 20 6F
	   72 20 41 4E 4F
	   54 48 45 52 20
	   4B 45 59 20 74
	   6F 20 43 4F 4E
	   54 49 4E 55 45
	   20 2D 2D 2D 00
												"Y to CONTINUE ---",0
 00000163 0A 00			strNewline 	        byte 10,0 ;newline constant
				; String Constant REPORTS
 00000165 0A 0D 20 20 20	strReportAuthorInfo	byte	10,13,32,32,32," Name: Daniel Crawford",10,13
	   20 4E 61 6D 65
	   3A 20 44 61 6E
	   69 65 6C 20 43
	   72 61 77 66 6F
	   72 64 0A 0D
 00000182 20 20 20 43 6C	strReportClass		byte 	32,32,32,"Class: CSCI 2160",10,13
	   61 73 73 3A 20
	   43 53 43 49 20
	   32 31 36 30 0A
	   0D
 00000197 20 20 20 20 20	strReportLab		byte	32,32,32,"  Lab: Proj3Driver_String1",10,13
	   4C 61 62 3A 20
	   50 72 6F 6A 33
	   44 72 69 76 65
	   72 5F 53 74 72
	   69 6E 67 31 0A
	   0D
 000001B6 20 20 20 20 44	strReportDate		byte	32,32,32," Date: 10/20/2016",10,13,0
	   61 74 65 3A 20
	   31 30 2F 32 30
	   2F 32 30 31 36
	   0A 0D 00
 000001CD 0A 0D 0A 0D 09	strReportStr1		byte	10,13,10,13,9,"string1       = ",0
	   73 74 72 69 6E
	   67 31 20 20 20
	   20 20 20 20 3D
	   20 00
 000001E3 0A 0D 09 73 74	strReportStr2		byte	10,13,9,"string2       = ",0
	   72 69 6E 67 32
	   20 20 20 20 20
	   20 20 3D 20 00
 000001F7 0A 0D 09 50 61	strReportnum		byte	10,13,9,"Passed number = ",0
	   73 73 65 64 20
	   6E 75 6D 62 65
	   72 20 3D 20 00
 0000020B 0A 0D 09 52 65	strReportEAX		byte	10,13,9,"Return in EAX = ",0
	   74 75 72 6E 20
	   69 6E 20 45 41
	   58 20 3D 20 00
 0000021F 0A 0D 09 52 65	strReportStrEAX		byte	10,13,9,"Return string = ",0
	   74 75 72 6E 20
	   73 74 72 69 6E
	   67 20 3D 20 00
 00000233 0A 0D 09 52 65	strReportRtrnChar	byte	10,13,9,"Return string = ",0
	   74 75 72 6E 20
	   73 74 72 69 6E
	   67 20 3D 20 00

 00000247 0A 0D 09 69 6E	strReportInt		byte	10,13,9,"int           = ",0
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 3D 20 00
 0000025B 0A 0D 09 63 68	strReportChar		byte	10,13,9,"char          = ",0
	   61 72 20 20 20
	   20 20 20 20 20
	   20 20 3D 20 00
				; String Constant INFO
 0000026F 0A 0D 0A 0D 20	strInfoTestStrLength byte	10,13,10,13,32,32,32,"Now testing the String_Length Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   4C 65 6E 67 74
	   68 20 4D 65 74
	   68 6F 64 0A 0D
												13
 0000029C 53 74 72 69 6E	strInfoStrLengthUML	 byte	"String_length(string1:String):int",0
	   67 5F 6C 65 6E
	   67 74 68 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 29 3A
	   69 6E 74 00
 000002BE 0A 0D 0A 0D 20	strInfoTestStrEquals byte	10,13,10,13,32,32,32,"Now testing the String_Equals Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 71 75 61 6C
	   73 20 4D 65 74
	   68 6F 64 0A 0D
												13
 000002EB 53 74 72 69 6E	strInfoStrEqualsUML	 byte	"String_equals(string1:String,string2:String):boolean (byte)",0
	   67 5F 65 71 75
	   61 6C 73 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 73
	   74 72 69 6E 67
	   32 3A 53 74 72
	   69 6E 67 29 3A
	   62 6F 6F 6C 65
	   61 6E 20 28 62
	   79 74 65 29 00
 00000327 0A 0D 0A 0D 20	strInfoTestEqualsIC	 byte	10,13,10,13,32,32,32,"Now testing the String_EqualsIgnoreCase",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 71 75 61 6C
	   73 49 67 6E 6F
	   72 65 43 61 73
	   65 20 4D 65 74
	   68 6F 64 0A 0D
												" Method",10,13
 0000035E 53 74 72 69 6E	strInfoEqualsICUML	 byte	"String_equalsIgnoreCase(string1:String,string2:String):boole",
	   67 5F 65 71 75
	   61 6C 73 49 67
	   6E 6F 72 65 43
	   61 73 65 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 73
	   74 72 69 6E 67
	   32 3A 53 74 72
	   69 6E 67 29 3A
	   62 6F 6F 6C 65
	   61 6E 20 28 62
	   79 74 65 29 00
												"an (byte)",0
 000003A4 0A 0D 0A 0D 20	strInfoTestStrCopy	 byte	10,13,10,13,32,32,32,"Now testing the String_Copy Method",10,13
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   43 6F 70 79 20
	   4D 65 74 68 6F
	   64 0A 0D
 000003CF 53 74 72 69 6E	strInfoStrCopyUML	 byte	"String_copy(string1:String):String => String_copy",
	   67 5F 63 6F 70
	   79 28 73 74 72
	   69 6E 67 31 3A
	   53 74 72 69 6E
	   67 29 3A 53 74
	   72 69 6E 67 20
	   3D 3E 20 53 74
	   72 69 6E 67 5F
	   63 6F 70 79 28
	   6C 70 53 74 72
	   69 6E 67 54 6F
	   43 6F 70 79 3A
	   64 77 6F 72 64
	   29 3A 64 77 6F
	   72 64 00
											"(lpStringToCopy:dword):dword",0
 0000041D 0A 0D 0A 0D 20	strInfoSubstr1		 byte	10,13,10,13,32,32,32,"Now testing the String_substring_1 Meth",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   73 75 62 73 74
	   72 69 6E 67 5F
	   31 20 4D 65 74
	   68 6F 64 0A 0D
												"od",10,13
 0000044F 53 74 72 69 6E	strInfoSubstr1UML	 byte	"String_substring_1(string1:String,beginIndex:int,endIndex:in",
	   67 5F 73 75 62
	   73 74 72 69 6E
	   67 5F 31 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 62
	   65 67 69 6E 49
	   6E 64 65 78 3A
	   69 6E 74 2C 65
	   6E 64 49 6E 64
	   65 78 3A 69 6E
	   74 29 3A 53 74
	   72 69 6E 67 00
												"t):String",0							
 00000495 0A 0D 0A 0D 20	strInfoSubstr2		 byte	10,13,10,13,32,32,32,"Now testing the String_substring_2 Meth",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   73 75 62 73 74
	   72 69 6E 67 5F
	   32 20 4D 65 74
	   68 6F 64 0A 0D
											"od",10,13
 000004C7 53 74 72 69 6E	strInfoSubstr2UML	 byte	"String_substring_2(string1:String,beginIndex:int):String",0							
	   67 5F 73 75 62
	   73 74 72 69 6E
	   67 5F 32 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 62
	   65 67 69 6E 49
	   6E 64 65 78 3A
	   69 6E 74 29 3A
	   53 74 72 69 6E
	   67 00
 00000500 0A 0D 0A 0D 20	strInfoTestStrCharAt byte	10,13,10,13,32,32,32,"Now testing the String_CharAt Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   43 68 61 72 41
	   74 20 4D 65 74
	   68 6F 64 0A 0D
												13
 0000052D 53 74 72 69 6E	strInfoStrCharAtUML	 byte	"String_charAt(string1:String,position:int):char (byte)",0
	   67 5F 63 68 61
	   72 41 74 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 70
	   6F 73 69 74 69
	   6F 6E 3A 69 6E
	   74 29 3A 63 68
	   61 72 20 28 62
	   79 74 65 29 00
 00000564 0A 0D 0A 0D 20	strInfoStrStartsWith1 	 byte	10,13,10,13,32,32,32,"Now testing the String_StartsWith_1",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   53 74 61 72 74
	   73 57 69 74 68
	   5F 31 4D 65 74
	   68 6F 64 0A 0D
													"Method",10,13
 00000596 53 74 72 69 6E	strInfoStrStartsWith1UML byte "String_startsWith_1(string1:String,strPrefix:String,pos:in",
	   67 5F 73 74 61
	   72 74 73 57 69
	   74 68 5F 31 28
	   73 74 72 69 6E
	   67 31 3A 53 74
	   72 69 6E 67 2C
	   73 74 72 50 72
	   65 66 69 78 3A
	   53 74 72 69 6E
	   67 2C 70 6F 73
	   3A 69 6E 74 29
	   3A 62 6F 6F 6C
	   65 61 6E 00
												"t):boolean",0							
 000005DB 0A 0D 0A 0D 20	strInfoStrStartsWith2 	 byte 10,13,10,13,32,32,32,"Now testing the String_StartsWith_2 M",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   53 74 61 72 74
	   73 57 69 74 68
	   5F 32 20 4D 65
	   74 68 6F 64 0A
	   0D
												"ethod",10,13
 0000060E 53 74 72 69 6E	strInfoStrStartsWith2UML byte "String_startsWith_2(string1:String, strPrefix:String):bool",
	   67 5F 73 74 61
	   72 74 73 57 69
	   74 68 5F 32 28
	   73 74 72 69 6E
	   67 31 3A 53 74
	   72 69 6E 67 2C
	   20 73 74 72 50
	   72 65 66 69 78
	   3A 53 74 72 69
	   6E 67 29 3A 62
	   6F 6F 6C 65 61
	   6E 00
												"ean",0
 0000064C 0A 0D 0A 0D 20	strInfoStrEndsWith 	 	 byte 10,13,10,13,32,32,32,"Now testing the String_EndsWith Metho",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 6E 64 73 57
	   69 74 68 20 4D
	   65 74 68 6F 64
	   0A 0D
												"d",10,13
 0000067B 53 74 72 69 6E	strInfoStrEndsWithUML 	 byte "String_endsWith(string1:String, suffix:String):boolean",0
	   67 5F 65 6E 64
	   73 57 69 74 68
	   28 73 74 72 69
	   6E 67 31 3A 53
	   74 72 69 6E 67
	   2C 20 73 75 66
	   66 69 78 3A 53
	   74 72 69 6E 67
	   29 3A 62 6F 6F
	   6C 65 61 6E 00
 000006B2 0A 0D 74 65 73	strRandomSHit byte 10, 13, "teset adf", 0
	   65 74 20 61 64
	   66 00


 00000000				.code
 00000000			_start:								 ;Entry point in program
 00000000			; Introduction
 00000000  B8 00000000			mov EAX,0  						 ;Ensures first instruction can be executed
					INVOKE 	putstring, ADDR strReportAuthorInfo	;Display author and file information
					
				; Run Tests and Report
 0000000F  E8 00000032			call TestString_length			 ;Tests and Reports for String_Length method
 00000014  E8 00000118			call TestString_equals
 00000019  E8 0000023A			call TestString_equalsIgnoreCase
 0000001E  E8 0000035C			call TestString_copy
 00000023  E8 00000442			call TestString_substring_1
 00000028  E8 00000568			call TestString_substring_2
 0000002D  E8 0000061B			call TestString_charAt
 00000032  E8 000007B9			call TestString_startsWith_1
 00000037  E8 0000085D			call TestString_startsWith_2
 0000003C  E8 0000093A			call TestString_endsWith

					
				; Exit Program
 00000041  E8 000009D2			call ExitProgram				 ;Displays exit message and invokes ExitProcess,0

				PUBLIC _start								;END METHOD

				COMMENT %
				*******************************************************************************************
				* Name:	TestString_length                                                                 *
				* Purpose:			                                                                      *
				*				Tests String_Length procedure with various values and report results      *
				*                                                                                         *
				* Date Created:			October 20, 2016                                                  *
				* Date Last Modified:	October 22, 2016                                                  *
				******************************************************************************************%

 00000046 00000046		TestString_length PROC USES EAX ECX ESI EDI
					INVOKE putstring, ADDR strInfoTestStrLength	;Display Test INFO
				; Initialize Test
					;lea ESI, strTestVals					;ESI = strTestVals address
					;mov ECX, iTestValsLength				;ECX = length of strTestVals
				; Call method
 00000054  68 00000000 R		push OFFSET strTest1				;Pass Param1
 00000059  E8 00000000 E		call String_length						;Call method
 0000005E  83 C4 04			add ESP,4								;Repair stack
 00000061  A3 000000CB R		mov [dReturnedVal],EAX					;Store returned Values
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putString, ADDR strNewline
					Invoke putstring, ADDR strOutput
					
 0000008A  68 00000007 R		push OFFSET strTest2				;Pass Param1
 0000008F  E8 00000000 E		call String_length						;Call method
 00000094  83 C4 04			add ESP,4								;Repair stack
 00000097  A3 000000CB R		mov [dReturnedVal],EAX					;Store returned Values
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putString, ADDR strNewline
					Invoke putstring, ADDR strOutput
					
 000000C0  68 0000000E R		push OFFSET strTest3				;Pass Param1
 000000C5  E8 00000000 E		call String_length						;Call method
 000000CA  83 C4 04			add ESP,4								;Repair stack
 000000CD  A3 000000CB R		mov [dReturnedVal],EAX					;Store returned Values
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putString, ADDR strNewline
					Invoke putstring, ADDR strOutput
					
 000000F6  68 00000011 R		push OFFSET strTest4				;Pass Param1
 000000FB  E8 00000000 E		call String_length						;Call method
 00000100  83 C4 04			add ESP,4								;Repair stack
 00000103  A3 000000CB R		mov [dReturnedVal],EAX					;Store returned Values
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putString, ADDR strNewline
					Invoke putstring, ADDR strOutput
					
					ret										;return
 00000131			TestString_length ENDP


 00000131			TestString_equals PROC USES EAX ECX ESI EDI

					Invoke putString , ADDR strInfoTestStrEquals
 0000013F  68 00000007 R		push OFFSET strTest2   ;push last parameter first 
 00000144  68 00000000 R		push OFFSET strTest1
 00000149  E8 00000000 E		call String_equals
 0000014E  83 C4 08			add ESP, 8
 00000151  A3 000000CB R		mov [dReturnedVal],EAX	
					;Invoke putString, EAX
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 00000184  68 00000000 R		push OFFSET strTest1   ;push last parameter first 
 00000189  68 00000000 R		push OFFSET strTest1
 0000018E  E8 00000000 E		call String_equals
 00000193  83 C4 08			add ESP, 8
 00000196  A3 000000CB R		mov [dReturnedVal],EAX	
					;Invoke putString, EAX
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 000001C9  68 00000007 R		push OFFSET strTest2   ;push last parameter first 
 000001CE  68 00000007 R		push OFFSET strTest2
 000001D3  E8 00000000 E		call String_equals
 000001D8  83 C4 08			add ESP, 8
 000001DB  A3 000000CB R		mov [dReturnedVal],EAX	
					;Invoke putString, EAX
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 0000020E  68 0000000E R		push OFFSET strTest3   ;push last parameter first 
 00000213  68 00000011 R		push OFFSET strTest4
 00000218  E8 00000000 E		call String_equals
 0000021D  83 C4 08			add ESP, 8
 00000220  A3 000000CB R		mov [dReturnedVal],EAX	
					;Invoke putString, EAX
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
						
					ret
 00000258			TestString_equals ENDP

 00000258			TestString_equalsIgnoreCase PROC USES EAX ECX ESI EDI
					Invoke putString , ADDR strInfoTestEqualsIC
 00000266  68 00000007 R		push OFFSET strTest2   ;push last parameter first 
 0000026B  68 00000000 R		push OFFSET strTest1
 00000270  E8 00000000 E		call String_equalsIgnoreCase
 00000275  83 C4 08			add ESP, 8
 00000278  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 000002AB  68 00000000 R		push OFFSET strTest1   ;push last parameter first 
 000002B0  68 00000000 R		push OFFSET strTest1
 000002B5  E8 00000000 E		call String_equalsIgnoreCase
 000002BA  83 C4 08			add ESP, 8
 000002BD  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 000002F0  68 0000000E R		push OFFSET strTest3   ;push last parameter first 
 000002F5  68 00000000 R		push OFFSET strTest1
 000002FA  E8 00000000 E		call String_equalsIgnoreCase
 000002FF  83 C4 08			add ESP, 8
 00000302  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 00000335  68 00000007 R		push OFFSET strTest2   ;push last parameter first 
 0000033A  68 00000011 R		push OFFSET strTest4
 0000033F  E8 00000000 E		call String_equalsIgnoreCase
 00000344  83 C4 08			add ESP, 8
 00000347  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
					ret
 0000037F			TestString_equalsIgnoreCase ENDP

 0000037F			TestString_copy PROC USES EAX ECX ESI EDI

					Invoke putString, ADDR strInfoTestStrCopy
 0000038D  68 00000000 R		push OFFSET strTest1
 00000392  E8 00000000 E		call String_copy
 00000397  83 C4 04			add esp, 4
 0000039A  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke putString, EAX
					
 000003B9  50				push eax
 000003BA  E8 00000000 E		call String_copy
 000003BF  83 C4 04			add esp, 4
 000003C2  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke putString, EAX
					
 000003E1  68 00000007 R		push OFFSET strTest2
 000003E6  E8 00000000 E		call String_copy
 000003EB  83 C4 04			add esp, 4
 000003EE  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke putString, EAX
					
 0000040D  68 0000000E R		push OFFSET strTest3
 00000412  E8 00000000 E		call String_copy
 00000417  83 C4 04			add esp, 4
 0000041A  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke putString, EAX
					
 00000439  68 00000011 R		push OFFSET strTest4		;empty string
 0000043E  E8 00000000 E		call String_copy
 00000443  83 C4 04			add esp, 4
 00000446  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke putString, EAX
					
					ret
 0000046A			TestString_copy ENDP

 0000046A			TestString_substring_1 PROC USES EAX ECX ESI EDI

					Invoke putString, ADDR strInfoSubstr1
 00000478  FF 35 00000040 R		push  dIndex2
 0000047E  FF 35 0000003C R		push  dIndex1
 00000484  68 00000000 R		push OFFSET strTest1
 00000489  E8 00000000 E		call String_subString_1
 0000048E  83 C4 0C			add esp, 12
					;mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000004A5  83 F8 FF			cmp eax, -1
 000004A8  74 06			je skip1
					Invoke putString, EAX

 000004B0			skip1:
 000004B0  B8 00000032			mov eax, 50
 000004B5  50				push  eax
 000004B6  FF 35 0000003C R		push  dIndex1
 000004BC  68 00000000 R		push OFFSET strTest1
 000004C1  E8 00000000 E		call String_subString_1
 000004C6  83 C4 0C			add esp, 12
					;mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000004DD  83 F8 FF			cmp eax, -1
 000004E0  74 06			je skip2
					Invoke putString, EAX
					
 000004E8			skip2:
 000004E8  B8 00000032			mov eax, 50
 000004ED  FF 35 00000040 R		push  dIndex2
 000004F3  50				push  eax
 000004F4  68 00000000 R		push OFFSET strTest1
 000004F9  E8 00000000 E		call String_subString_1
 000004FE  83 C4 0C			add esp, 12
					;mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 00000515  83 F8 FF			cmp eax, -1
 00000518  74 06			je skip3
					Invoke putString, EAX
					
 00000520			skip3:
 00000520  B8 FFFFFFFF			mov eax, -1
 00000525  FF 35 00000040 R		push  dIndex2
 0000052B  50				push  eax
 0000052C  68 00000000 R		push OFFSET strTest1
 00000531  E8 00000000 E		call String_subString_1
 00000536  83 C4 0C			add esp, 12
					;mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 0000054D  83 F8 FF			cmp eax, -1
 00000550  74 06			je skip4
					Invoke putString, EAX
					
 00000558			skip4:
 00000558  B8 FFFFFFFF			mov eax, -1
 0000055D  50				push  eax
 0000055E  FF 35 0000003C R		push  dIndex1
 00000564  68 00000000 R		push OFFSET strTest1
 00000569  E8 00000000 E		call String_subString_1
 0000056E  83 C4 0C			add esp, 12
					;mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 00000585  83 F8 FF			cmp eax, -1
 00000588  74 06			je finish
					Invoke putString, EAX

 00000590			finish:
					ret
 00000595			TestString_substring_1 ENDP

 00000595			TestString_substring_2 PROC USES EAX ECX ESI EDI

					Invoke putString, ADDR strInfoSubstr2
					
 000005A3  FF 35 0000003C R		push dIndex1
 000005A9  68 00000000 R		push OFFSET strTest1
 000005AE  E8 00000000 E		call String_subString_2
 000005B3  83 C4 08			add esp, 8	
 000005B6  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000005CF  83 F8 FF			cmp eax, -1
 000005D2  74 06			je skip1
					Invoke putString, EAX

 000005DA			skip1:	
 000005DA  B8 FFFFFFFF			mov eax, -1
 000005DF  50				push eax
 000005E0  68 00000000 R		push OFFSET strTest1
 000005E5  E8 00000000 E		call String_subString_2
 000005EA  83 C4 08			add esp, 8	
 000005ED  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 00000606  83 F8 FF			cmp eax, -1
 00000609  74 06			je skip2
					Invoke putString, EAX
					
 00000611			skip2:
 00000611  B8 00000032			mov eax, 50
 00000616  50				push eax
 00000617  68 00000000 R		push OFFSET strTest1
 0000061C  E8 00000000 E		call String_subString_2
 00000621  83 C4 08			add esp, 8	
 00000624  A3 000000CB R		mov [dReturnedVal],EAX	
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 0000063D  83 F8 FF			cmp eax, -1
 00000640  74 06			je finish
					Invoke putString, EAX
					
 00000648			finish:
					ret 
 0000064D			TestString_substring_2 ENDP

 0000064D			TestString_charAt PROC USES EAX ECX ESI EDI
					Invoke putString, ADDR strInfoTestStrCharAt
 0000065B  FF 35 00000040 R		push dIndex2
 00000661  68 00000000 R		push OFFSET strTest1
 00000666  E8 00000000 E		call String_charAt
 0000066B  83 C4 08			add esp, 8
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 00000682  83 F8 FF			cmp eax, -1
 00000685  74 06			je skip1
					Invoke putString, EAX
 0000068D			skip1:
 0000068D  B8 00000000			mov eax,0
 00000692  50				push eax
 00000693  68 00000000 R		push OFFSET strTest1
 00000698  E8 00000000 E		call String_charAt
 0000069D  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000006B4  83 F8 FF			cmp eax, -1
 000006B7  74 06			je skip2
					Invoke putString, EAX
 000006BF			skip2:	
 000006BF  B8 00000001			mov eax, 1
 000006C4  50				push eax
 000006C5  68 00000000 R		push OFFSET strTest1
 000006CA  E8 00000000 E		call String_charAt
 000006CF  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000006E6  83 F8 FF			cmp eax, -1
 000006E9  74 06			je skip3
					Invoke putString, EAX
 000006F1			skip3:
 000006F1  B8 00000002			mov eax, 2
 000006F6  50				push eax
 000006F7  68 00000000 R		push OFFSET strTest1
 000006FC  E8 00000000 E		call String_charAt
 00000701  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 00000718  83 F8 FF			cmp eax, -1
 0000071B  74 06			je skip4
					Invoke putString, EAX
 00000723			skip4:
 00000723  B8 00000003			mov eax, 3
 00000728  50				push eax
 00000729  68 00000000 R		push OFFSET strTest1
 0000072E  E8 00000000 E		call String_charAt
 00000733  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 0000074A  83 F8 FF			cmp eax, -1
 0000074D  74 06			je skip5
					Invoke putString, EAX
 00000755			skip5:
 00000755  B8 00000004			mov eax, 4
 0000075A  50				push eax
 0000075B  68 00000000 R		push OFFSET strTest1
 00000760  E8 00000000 E		call String_charAt
 00000765  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 0000077C  83 F8 FF			cmp eax, -1
 0000077F  74 06			je skip6
					Invoke putString, EAX
 00000787			skip6:
 00000787  B8 00000005			mov eax, 5
 0000078C  50				push eax
 0000078D  68 00000000 R		push OFFSET strTest1
 00000792  E8 00000000 E		call String_charAt
 00000797  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000007AE  83 F8 FF			cmp eax, -1
 000007B1  74 06			je skip7
					Invoke putString, EAX
 000007B9			skip7:
 000007B9  B8 00000006			mov eax, 6
 000007BE  50				push eax
 000007BF  68 00000000 R		push OFFSET strTest1
 000007C4  E8 00000000 E		call String_charAt
 000007C9  83 C4 08			add esp, 8
						Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
 000007E0  83 F8 FF			cmp eax, -1
 000007E3  74 06			je finish
					Invoke putString, EAX
 000007EB			finish:
					ret
 000007F0			TestString_charAt endp


 000007F0			TestString_startsWith_1  PROC USES EAX ECX ESI EDI

					Invoke putString, ADDR strInfoStrStartsWith1
					
					
 000007FE  FF 35 0000003C R		push dIndex1
 00000804  68 0000000E R		push OFFSET strTest3
 00000809  68 00000000 R		push OFFSET strTest1
 0000080E  E8 00000000 E		call String_startsWith_1
 00000813  83 C4 0C			add esp, 12
 00000816  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 00000849  B8 00000004			mov eax, 4
 0000084E  50				push eax
 0000084F  68 0000000E R		push OFFSET strTest3
 00000854  68 00000000 R		push OFFSET strTest1
 00000859  E8 00000000 E		call String_startsWith_1
 0000085E  83 C4 0C			add esp, 12
 00000861  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
					ret 
 00000899			TestString_startsWith_1 endp



 00000899			TestString_startsWith_2 PROC USES EAX ECX ESI EDI

				Invoke putString, ADDR strInfoStrStartsWith2

 000008A7  68 0000000E R		push OFFSET strTest3
 000008AC  68 00000000 R		push OFFSET strTest1
 000008B1  E8 00000000 E		call String_startsWith_2
 000008B6  83 C4 08			add esp, 8
 000008B9  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput

					
 000008EC  68 00000030 R		push OFFSET strTest5
 000008F1  68 00000000 R		push OFFSET strTest1
 000008F6  E8 00000000 E		call String_startsWith_2
 000008FB  83 C4 08			add esp, 8
 000008FE  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 00000931  68 00000034 R		push OFFSET strTest6
 00000936  68 00000000 R		push OFFSET strTest1
 0000093B  E8 00000000 E		call String_startsWith_2
 00000940  83 C4 08			add esp, 8
 00000943  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput

					ret
 0000097B			TestString_startsWith_2 endp




 0000097B			TestString_endsWith PROC USES EAX ECX ESI EDI

				Invoke putString, ADDR strInfoStrEndsWith 	


 00000989  68 0000000E R		push OFFSET strTest3
 0000098E  68 00000000 R		push OFFSET strTest1
 00000993  E8 00000000 E		call String_endsWith
 00000998  83 C4 08			add esp, 8

 0000099B  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					
 000009CE  68 00000011 R		push OFFSET strTest4
 000009D3  68 00000000 R		push OFFSET strTest1
 000009D8  E8 00000000 E		call String_endsWith
 000009DD  83 C4 08			add esp, 8

 000009E0  A3 000000CB R		mov [dReturnedVal],EAX	
					
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput



					ret
 00000A18			TestString_endsWith endp
				COMMENT %
				*******************************************************************************************
				* Name:	ExitProgram                                                                       *
				* Purpose:			                                                                      *
				*				Displays message and then invokes ExitProcess                             *                                                               *
				*                                                                                         *
				* Date Created:			October 22, 2016                                                  *
				* Date Last Modified:	October 22, 2016                                                  *
				******************************************************************************************%

 00000A18			ExitProgram PROC							;To exit the program...
					INVOKE putstring, ADDR strPromptExit	;Display exit message to user
					INVOKE getch							;Hold screen until user hits enter
					INVOKE ExitProcess, 0					;Exit the program
 00000A2E			ExitProgram ENDP							;END ExitProgram

				END											;END CODE
Microsoft (R) Macro Assembler Version 6.14.8444		    04/18/17 22:41:26
MASM3.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000006BE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A2E Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000046 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProgram  . . . . . . . . . .	P Near	 00000A18 _TEXT	Length= 00000016 Public
TestString_charAt  . . . . . . .	P Near	 0000064D _TEXT	Length= 000001A3 Public
  skip1  . . . . . . . . . . . .	L Near	 0000068D _TEXT	
  skip2  . . . . . . . . . . . .	L Near	 000006BF _TEXT	
  skip3  . . . . . . . . . . . .	L Near	 000006F1 _TEXT	
  skip4  . . . . . . . . . . . .	L Near	 00000723 _TEXT	
  skip5  . . . . . . . . . . . .	L Near	 00000755 _TEXT	
  skip6  . . . . . . . . . . . .	L Near	 00000787 _TEXT	
  skip7  . . . . . . . . . . . .	L Near	 000007B9 _TEXT	
  finish . . . . . . . . . . . .	L Near	 000007EB _TEXT	
TestString_copy  . . . . . . . .	P Near	 0000037F _TEXT	Length= 000000EB Public
TestString_endsWith  . . . . . .	P Near	 0000097B _TEXT	Length= 0000009D Public
TestString_equalsIgnoreCase  . .	P Near	 00000258 _TEXT	Length= 00000127 Public
TestString_equals  . . . . . . .	P Near	 00000131 _TEXT	Length= 00000127 Public
TestString_length  . . . . . . .	P Near	 00000046 _TEXT	Length= 000000EB Public
TestString_startsWith_1  . . . .	P Near	 000007F0 _TEXT	Length= 000000A9 Public
TestString_startsWith_2  . . . .	P Near	 00000899 _TEXT	Length= 000000E2 Public
TestString_substring_1 . . . . .	P Near	 0000046A _TEXT	Length= 0000012B Public
  skip1  . . . . . . . . . . . .	L Near	 000004B0 _TEXT	
  skip2  . . . . . . . . . . . .	L Near	 000004E8 _TEXT	
  skip3  . . . . . . . . . . . .	L Near	 00000520 _TEXT	
  skip4  . . . . . . . . . . . .	L Near	 00000558 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000590 _TEXT	
TestString_substring_2 . . . . .	P Near	 00000595 _TEXT	Length= 000000B8 Public
  skip1  . . . . . . . . . . . .	L Near	 000005DA _TEXT	
  skip2  . . . . . . . . . . . .	L Near	 00000611 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000648 _TEXT	
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getche . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
COMMA_KEY  . . . . . . . . . . .	Number	 0000002Ch   
ENTER_KEY  . . . . . . . . . . .	Number	 0000000Dh   
STR_MAX  . . . . . . . . . . . .	Number	 0000001Eh   
String_charAt  . . . . . . . . .	L Near	 00000000 FLAT	External
String_copy  . . . . . . . . . .	L Near	 00000000 FLAT	External
String_endsWith  . . . . . . . .	L Near	 00000000 FLAT	External
String_equalsIgnoreCase  . . . .	L Near	 00000000 FLAT	External
String_equals  . . . . . . . . .	L Near	 00000000 FLAT	External
String_length  . . . . . . . . .	L Near	 00000000 FLAT	External
String_startsWith_1  . . . . . .	L Near	 00000000 FLAT	External
String_startsWith_2  . . . . . .	L Near	 00000000 FLAT	External
String_substring_1 . . . . . . .	L Near	 00000000 FLAT	External
String_substring_2 . . . . . . .	L Near	 00000000 FLAT	External
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
dIndex1  . . . . . . . . . . . .	DWord	 0000003C _DATA	
dIndex2  . . . . . . . . . . . .	DWord	 00000040 _DATA	
dReturnedVal . . . . . . . . . .	DWord	 000000CB _DATA	
iTestValsLength  . . . . . . . .	DWord	 00000075 _DATA	
numValTemp1  . . . . . . . . . .	DWord	 000000C3 _DATA	
numValTemp2  . . . . . . . . . .	DWord	 000000C7 _DATA	
strInfoEqualsICUML . . . . . . .	Byte	 0000035E _DATA	
strInfoStrCharAtUML  . . . . . .	Byte	 0000052D _DATA	
strInfoStrCopyUML  . . . . . . .	Byte	 000003CF _DATA	
strInfoStrEndsWithUML  . . . . .	Byte	 0000067B _DATA	
strInfoStrEndsWith . . . . . . .	Byte	 0000064C _DATA	
strInfoStrEqualsUML  . . . . . .	Byte	 000002EB _DATA	
strInfoStrLengthUML  . . . . . .	Byte	 0000029C _DATA	
strInfoStrStartsWith1UML . . . .	Byte	 00000596 _DATA	
strInfoStrStartsWith1  . . . . .	Byte	 00000564 _DATA	
strInfoStrStartsWith2UML . . . .	Byte	 0000060E _DATA	
strInfoStrStartsWith2  . . . . .	Byte	 000005DB _DATA	
strInfoSubstr1UML  . . . . . . .	Byte	 0000044F _DATA	
strInfoSubstr1 . . . . . . . . .	Byte	 0000041D _DATA	
strInfoSubstr2UML  . . . . . . .	Byte	 000004C7 _DATA	
strInfoSubstr2 . . . . . . . . .	Byte	 00000495 _DATA	
strInfoTestEqualsIC  . . . . . .	Byte	 00000327 _DATA	
strInfoTestStrCharAt . . . . . .	Byte	 00000500 _DATA	
strInfoTestStrCopy . . . . . . .	Byte	 000003A4 _DATA	
strInfoTestStrEquals . . . . . .	Byte	 000002BE _DATA	
strInfoTestStrLength . . . . . .	Byte	 0000026F _DATA	
strNewline . . . . . . . . . . .	Byte	 00000163 _DATA	
strOutput  . . . . . . . . . . .	DWord	 00000038 _DATA	
strPromptExit  . . . . . . . . .	Byte	 000000D8 _DATA	
strPromptRepeat  . . . . . . . .	Byte	 0000011D _DATA	
strRandomSHit  . . . . . . . . .	Byte	 000006B2 _DATA	
strReportAuthorInfo  . . . . . .	Byte	 00000165 _DATA	
strReportChar  . . . . . . . . .	Byte	 0000025B _DATA	
strReportClass . . . . . . . . .	Byte	 00000182 _DATA	
strReportDate  . . . . . . . . .	Byte	 000001B6 _DATA	
strReportEAX . . . . . . . . . .	Byte	 0000020B _DATA	
strReportInt . . . . . . . . . .	Byte	 00000247 _DATA	
strReportLab . . . . . . . . . .	Byte	 00000197 _DATA	
strReportRtrnChar  . . . . . . .	Byte	 00000233 _DATA	
strReportStr1  . . . . . . . . .	Byte	 000001CD _DATA	
strReportStr2  . . . . . . . . .	Byte	 000001E3 _DATA	
strReportStrEAX  . . . . . . . .	Byte	 0000021F _DATA	
strReportnum . . . . . . . . . .	Byte	 000001F7 _DATA	
strReturnedVal . . . . . . . . .	Byte	 000000CF _DATA	
strTest1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
strTest2 . . . . . . . . . . . .	Byte	 00000007 _DATA	
strTest3 . . . . . . . . . . . .	Byte	 0000000E _DATA	
strTest4 . . . . . . . . . . . .	Byte	 00000011 _DATA	
strTest5 . . . . . . . . . . . .	Byte	 00000030 _DATA	
strTest6 . . . . . . . . . . . .	Byte	 00000034 _DATA	
strTestVals  . . . . . . . . . .	Byte	 00000044 _DATA	
strValTemp1  . . . . . . . . . .	Byte	 00000079 _DATA	
strValTemp2  . . . . . . . . . .	Byte	 00000098 _DATA	
strValTemp3  . . . . . . . . . .	Byte	 000000B7 _DATA	

	   0 Warnings
	   0 Errors
