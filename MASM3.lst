Microsoft (R) Macro Assembler Version 6.14.8444		    04/13/17 23:16:48
MASM3.asm						     Page 1 - 1


				;******************************************************************************************
				;Name: 		Daniel Crawford
				;Program: 	proj3Driver_string1.asm
				;Class: 	CSCI 2160-001
				;Lab: 		Proj3Driver_String1
				;Date: 		October 20, 2016
				;Purpose:
				;		To test methods a set of given test values for string1.asm and report returned
				;			values.
				;******************************************************************************************
					.486										;X86 INSTRUCTION SET
					.MODEL flat									;USE ABSOLUTE ADDRESSES
					.STACK 100h									;SET ASIDE 256 BYTES FOR THE STACK 

					ExitProcess PROTO Near32 stdcall, dwExitCode:dword
					intasc32 	PROTO Near32 stdcall, lpStringToHold:dword, dVal:dword
					ascint32 	PROTO Near32 stdcall, lpStringOfNumericChars:dword
					getch	 	PROTO Near32 stdcall
					getche		PROTO Near32 stdcall
					putch 		PROTO Near32 stdcall, bChar:byte
					putstring 	PROTO Near32 stdcall, lpStringToPrint:dword
					getstring 	PROTO Near32 stdcall, lpStringToGet:dword,	dLength:dword
					hexToChar 	PROTO Near32 stdcall, lpDestStr:dword,lpSourceStr:dword,dLen:dword
					memoryallocBailey PROTO Near32 stdcall, dNumBytes:dword  ;returns address ofmemory
				; Methods from string1.asm
					EXTERN String_length:PROC
					EXTERN String_equals:PROC
					EXTERN String_equalsIgnoreCase: PROC
					
					
 00000000				.data
				; Constant Values
 = 0000001E			STR_MAX   = 30				;Max string length for entered values
 = 0000002C			COMMA_KEY = 02Ch			;value for the Comma key
 = 0000000D			ENTER_KEY = 13				;value for the enter key

				; String Constant TESTVALS
 00000000 47 6F 6C 64 65	strTest1            byte  "Golden", 0
	   6E 00
 00000007 67 4F 6C 64 65	strTest2            byte  "gOlden", 0
	   6E 00
 0000000E 00000000		strOutput           dword ?

											;--- Insert test values here seperated with commas --- 
 00000012 56 40 31 75 65	strTestVals			byte	"V@1ues,string,not string,,!@#$%^^,MiXed-Up V@1ues"
	   73 2C 73 74 72
	   69 6E 67 2C 6E
	   6F 74 20 73 74
	   72 69 6E 67 2C
	   2C 21 40 23 24
	   25 5E 5E 2C 4D
	   69 58 65 64 2D
	   55 70 20 56 40
	   31 75 65 73
											;-----------------------------------------------------
 00000043 00000031		iTestValsLength		dword	($-strTestVals)			;Length of TestVals in bytes
				; Operational Storage
 00000047  0000001F [		strValTemp1			byte	(STR_MAX + 1) dup(?)	;Storage for current test string
	    00
	   ]
 00000066  0000001F [		strValTemp2			byte	(STR_MAX + 1) dup(?)	;Storage for user entered string
	    00
	   ]
 00000085  0000000C [		strValTemp3			byte	12 dup(?)				;Storage for user entered string number
	    00
	   ]
 00000091 00000000		numValTemp1			dword	?						;Storage for numeric parameter
 00000095 00000000		numValTemp2			dword	?						;Storage for numeric parameter
 00000099 00000000		dReturnedVal		dword	?						;Storage for returned value
 0000009D  00000009 [		strReturnedVal		byte	9 dup(?)				;Storage for returned value as a string
	    00
	   ]
				; String Constant PROMPTS
 000000A6 0A 0D 0A 0D 0A	strPromptExit		byte 	10,13,10,13,10,13,"Thank you for using my program! Hope you f",
	   0D 54 68 61 6E
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 21 20 48 6F
	   70 65 20 79 6F
	   75 20 66 6F 75
	   6E 64 20 74 68
	   69 73 20 68 65
	   6C 70 66 75 6C
	   21 0A 0D 00
												"ound this helpful!",10,13,0
 000000EB 0A 0D 0A 0D 20	strPromptRepeat		byte	10,13,10,13,"  --- Press <ENTER> to REPEAT test or ANOTHER KE",
	   20 2D 2D 2D 20
	   50 72 65 73 73
	   20 3C 45 4E 54
	   45 52 3E 20 74
	   6F 20 52 45 50
	   45 41 54 20 74
	   65 73 74 20 6F
	   72 20 41 4E 4F
	   54 48 45 52 20
	   4B 45 59 20 74
	   6F 20 43 4F 4E
	   54 49 4E 55 45
	   20 2D 2D 2D 00
												"Y to CONTINUE ---",0
 00000131 0A 00			strNewline 	        byte 10,0 ;newline constant
				; String Constant REPORTS
 00000133 0A 0D 20 20 20	strReportAuthorInfo	byte	10,13,32,32,32," Name: Daniel Crawford",10,13
	   20 4E 61 6D 65
	   3A 20 44 61 6E
	   69 65 6C 20 43
	   72 61 77 66 6F
	   72 64 0A 0D
 00000150 20 20 20 43 6C	strReportClass		byte 	32,32,32,"Class: CSCI 2160",10,13
	   61 73 73 3A 20
	   43 53 43 49 20
	   32 31 36 30 0A
	   0D
 00000165 20 20 20 20 20	strReportLab		byte	32,32,32,"  Lab: Proj3Driver_String1",10,13
	   4C 61 62 3A 20
	   50 72 6F 6A 33
	   44 72 69 76 65
	   72 5F 53 74 72
	   69 6E 67 31 0A
	   0D
 00000184 20 20 20 20 44	strReportDate		byte	32,32,32," Date: 10/20/2016",10,13,0
	   61 74 65 3A 20
	   31 30 2F 32 30
	   2F 32 30 31 36
	   0A 0D 00
 0000019B 0A 0D 0A 0D 09	strReportStr1		byte	10,13,10,13,9,"string1       = ",0
	   73 74 72 69 6E
	   67 31 20 20 20
	   20 20 20 20 3D
	   20 00
 000001B1 0A 0D 09 73 74	strReportStr2		byte	10,13,9,"string2       = ",0
	   72 69 6E 67 32
	   20 20 20 20 20
	   20 20 3D 20 00
 000001C5 0A 0D 09 50 61	strReportnum		byte	10,13,9,"Passed number = ",0
	   73 73 65 64 20
	   6E 75 6D 62 65
	   72 20 3D 20 00
 000001D9 0A 0D 09 52 65	strReportEAX		byte	10,13,9,"Return in EAX = ",0
	   74 75 72 6E 20
	   69 6E 20 45 41
	   58 20 3D 20 00
 000001ED 0A 0D 09 52 65	strReportStrEAX		byte	10,13,9,"Return string = ",0
	   74 75 72 6E 20
	   73 74 72 69 6E
	   67 20 3D 20 00
 00000201 0A 0D 09 52 65	strReportRtrnChar	byte	10,13,9,"Return string = ",0
	   74 75 72 6E 20
	   73 74 72 69 6E
	   67 20 3D 20 00

 00000215 0A 0D 09 69 6E	strReportInt		byte	10,13,9,"int           = ",0
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 3D 20 00
 00000229 0A 0D 09 63 68	strReportChar		byte	10,13,9,"char          = ",0
	   61 72 20 20 20
	   20 20 20 20 20
	   20 20 3D 20 00
				; String Constant INFO
 0000023D 0A 0D 0A 0D 20	strInfoTestStrLength byte	10,13,10,13,32,32,32,"Now testing the String_Length Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   4C 65 6E 67 74
	   68 20 4D 65 74
	   68 6F 64 0A 0D
												13
 0000026A 53 74 72 69 6E	strInfoStrLengthUML	 byte	"String_length(string1:String):int",0
	   67 5F 6C 65 6E
	   67 74 68 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 29 3A
	   69 6E 74 00
 0000028C 0A 0D 0A 0D 20	strInfoTestStrEquals byte	10,13,10,13,32,32,32,"Now testing the String_Equals Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 71 75 61 6C
	   73 20 4D 65 74
	   68 6F 64 0A 0D
												13
 000002B9 53 74 72 69 6E	strInfoStrEqualsUML	 byte	"String_equals(string1:String,string2:String):boolean (byte)",0
	   67 5F 65 71 75
	   61 6C 73 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 73
	   74 72 69 6E 67
	   32 3A 53 74 72
	   69 6E 67 29 3A
	   62 6F 6F 6C 65
	   61 6E 20 28 62
	   79 74 65 29 00
 000002F5 0A 0D 0A 0D 20	strInfoTestEqualsIC	 byte	10,13,10,13,32,32,32,"Now testing the String_EqualsIgnoreCase",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 71 75 61 6C
	   73 49 67 6E 6F
	   72 65 43 61 73
	   65 20 4D 65 74
	   68 6F 64 0A 0D
												" Method",10,13
 0000032C 53 74 72 69 6E	strInfoEqualsICUML	 byte	"String_equalsIgnoreCase(string1:String,string2:String):boole",
	   67 5F 65 71 75
	   61 6C 73 49 67
	   6E 6F 72 65 43
	   61 73 65 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 73
	   74 72 69 6E 67
	   32 3A 53 74 72
	   69 6E 67 29 3A
	   62 6F 6F 6C 65
	   61 6E 20 28 62
	   79 74 65 29 00
												"an (byte)",0
 00000372 0A 0D 0A 0D 20	strInfoTestStrCopy	 byte	10,13,10,13,32,32,32,"Now testing the String_Copy Method",10,13
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   43 6F 70 79 20
	   4D 65 74 68 6F
	   64 0A 0D
 0000039D 53 74 72 69 6E	strInfoStrCopyUML	 byte	"String_copy(string1:String):String => String_copy",
	   67 5F 63 6F 70
	   79 28 73 74 72
	   69 6E 67 31 3A
	   53 74 72 69 6E
	   67 29 3A 53 74
	   72 69 6E 67 20
	   3D 3E 20 53 74
	   72 69 6E 67 5F
	   63 6F 70 79 28
	   6C 70 53 74 72
	   69 6E 67 54 6F
	   43 6F 70 79 3A
	   64 77 6F 72 64
	   29 3A 64 77 6F
	   72 64 00
											"(lpStringToCopy:dword):dword",0
 000003EB 0A 0D 0A 0D 20	strInfoSubstr1		 byte	10,13,10,13,32,32,32,"Now testing the String_substring_1 Meth",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   73 75 62 73 74
	   72 69 6E 67 5F
	   31 20 4D 65 74
	   68 6F 64 0A 0D
												"od",10,13
 0000041D 53 74 72 69 6E	strInfoSubstr1UML	 byte	"String_substring_1(string1:String,beginIndex:int,endIndex:in",
	   67 5F 73 75 62
	   73 74 72 69 6E
	   67 5F 31 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 62
	   65 67 69 6E 49
	   6E 64 65 78 3A
	   69 6E 74 2C 65
	   6E 64 49 6E 64
	   65 78 3A 69 6E
	   74 29 3A 53 74
	   72 69 6E 67 00
												"t):String",0							
 00000463 0A 0D 0A 0D 20	strInfoSubstr2		 byte	10,13,10,13,32,32,32,"Now testing the String_substring_2 Meth",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   73 75 62 73 74
	   72 69 6E 67 5F
	   32 20 4D 65 74
	   68 6F 64 0A 0D
											"od",10,13
 00000495 53 74 72 69 6E	strInfoSubstr2UML	 byte	"String_substring_2(string1:String,beginIndex:int):String",0							
	   67 5F 73 75 62
	   73 74 72 69 6E
	   67 5F 32 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 62
	   65 67 69 6E 49
	   6E 64 65 78 3A
	   69 6E 74 29 3A
	   53 74 72 69 6E
	   67 00
 000004CE 0A 0D 0A 0D 20	strInfoTestStrCharAt byte	10,13,10,13,32,32,32,"Now testing the String_CharAt Method",10,
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   43 68 61 72 41
	   74 20 4D 65 74
	   68 6F 64 0A 0D
												13
 000004FB 53 74 72 69 6E	strInfoStrCharAtUML	 byte	"String_charAt(string1:String,position:int):char (byte)",0
	   67 5F 63 68 61
	   72 41 74 28 73
	   74 72 69 6E 67
	   31 3A 53 74 72
	   69 6E 67 2C 70
	   6F 73 69 74 69
	   6F 6E 3A 69 6E
	   74 29 3A 63 68
	   61 72 20 28 62
	   79 74 65 29 00
 00000532 0A 0D 0A 0D 20	strInfoStrStartsWith1 	 byte	10,13,10,13,32,32,32,"Now testing the String_StartsWith_1",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   53 74 61 72 74
	   73 57 69 74 68
	   5F 31 4D 65 74
	   68 6F 64 0A 0D
													"Method",10,13
 00000564 53 74 72 69 6E	strInfoStrStartsWith1UML byte "String_startsWith_1(string1:String,strPrefix:String,pos:in",
	   67 5F 73 74 61
	   72 74 73 57 69
	   74 68 5F 31 28
	   73 74 72 69 6E
	   67 31 3A 53 74
	   72 69 6E 67 2C
	   73 74 72 50 72
	   65 66 69 78 3A
	   53 74 72 69 6E
	   67 2C 70 6F 73
	   3A 69 6E 74 29
	   3A 62 6F 6F 6C
	   65 61 6E 00
												"t):boolean",0							
 000005A9 0A 0D 0A 0D 20	strInfoStrStartsWith2 	 byte 10,13,10,13,32,32,32,"Now testing the String_StartsWith_2 M",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   53 74 61 72 74
	   73 57 69 74 68
	   5F 32 20 4D 65
	   74 68 6F 64 0A
	   0D
												"ethod",10,13
 000005DC 53 74 72 69 6E	strInfoStrStartsWith2UML byte "String_startsWith_2(string1:String, strPrefix:String):bool",
	   67 5F 73 74 61
	   72 74 73 57 69
	   74 68 5F 32 28
	   73 74 72 69 6E
	   67 31 3A 53 74
	   72 69 6E 67 2C
	   20 73 74 72 50
	   72 65 66 69 78
	   3A 53 74 72 69
	   6E 67 29 3A 62
	   6F 6F 6C 65 61
	   6E 00
												"ean",0
 0000061A 0A 0D 0A 0D 20	strInfoStrEndsWith 	 	 byte 10,13,10,13,32,32,32,"Now testing the String_EndsWith Metho",
	   20 20 4E 6F 77
	   20 74 65 73 74
	   69 6E 67 20 74
	   68 65 20 53 74
	   72 69 6E 67 5F
	   45 6E 64 73 57
	   69 74 68 20 4D
	   65 74 68 6F 64
	   0A 0D
												"d",10,13
 00000649 53 74 72 69 6E	strInfoStrEndsWithUML 	 byte "String_endsWith(string1:String, suffix:String):boolean",0
	   67 5F 65 6E 64
	   73 57 69 74 68
	   28 73 74 72 69
	   6E 67 31 3A 53
	   74 72 69 6E 67
	   2C 20 73 75 66
	   66 69 78 3A 53
	   74 72 69 6E 67
	   29 3A 62 6F 6F
	   6C 65 61 6E 00
 00000680 0A 0D 74 65 73	strRandomSHit byte 10, 13, "teset adf", 0
	   65 74 20 61 64
	   66 00


 00000000				.code
 00000000			_start:								 ;Entry point in program
 00000000			; Introduction
 00000000  B8 00000000			mov EAX,0  						 ;Ensures first instruction can be executed
					INVOKE 	putstring, ADDR strReportAuthorInfo	;Display author and file information
					
				; Run Tests and Report
 0000000F  E8 0000000A			call TestString_length			 ;Tests and Reports for String_Length method
 00000014  E8 0000004E			call TestString_equals

					
				; Exit Program
 00000019  E8 000000A1			call ExitProgram				 ;Displays exit message and invokes ExitProcess,0

				PUBLIC _start								;END METHOD

				COMMENT %
				*******************************************************************************************
				* Name:	TestString_length                                                                 *
				* Purpose:			                                                                      *
				*				Tests String_Length procedure with various values and report results      *
				*                                                                                         *
				* Date Created:			October 20, 2016                                                  *
				* Date Last Modified:	October 22, 2016                                                  *
				******************************************************************************************%

 0000001E 0000001E		TestString_length PROC USES EAX ECX ESI EDI
					
					INVOKE putstring, ADDR strInfoTestStrLength	;Display Test INFO
				; Initialize Test
					;lea ESI, strTestVals					;ESI = strTestVals address
					;mov ECX, iTestValsLength				;ECX = length of strTestVals


				; Call method
 0000002C  68 00000000 R		push OFFSET strTest1				;Pass Param1
 00000031  E8 00000000 E		call String_length						;Call method
 00000036  83 C4 04			add ESP,4								;Repair stack
 00000039  A3 00000099 R		mov [dReturnedVal],EAX					;Store returned Values
					
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putString, ADDR strNewline
					Invoke putstring, ADDR strOutput
					


					ret										;return

 00000067			TestString_length ENDP


 00000067			TestString_equals PROC USES EAX ECX ESI EDI

					Invoke putString , ADDR strInfoTestStrEquals
 00000075  68 00000007 R		push OFFSET strTest2   ;push last parameter first 
 0000007A  68 00000000 R		push OFFSET strTest1
 0000007F  E8 00000000 E		call String_equalsIgnoreCase
 00000084  83 C4 08			add ESP, 8
 00000087  A3 00000099 R		mov [dReturnedVal],EAX	
					
					;Invoke putString, EAX
					Invoke putString, ADDR strNewline
					Invoke putString, ADDR strNewline
					Invoke intasc32, ADDR strOutput, dReturnedVal
					Invoke putstring, ADDR strOutput
					ret

 000000BF			TestString_equals ENDP








				COMMENT %
				*******************************************************************************************
				* Name:	ExitProgram                                                                       *
				* Purpose:			                                                                      *
				*				Displays message and then invokes ExitProcess                             *                                                               *
				*                                                                                         *
				* Date Created:			October 22, 2016                                                  *
				* Date Last Modified:	October 22, 2016                                                  *
				******************************************************************************************%

 000000BF			ExitProgram PROC							;To exit the program...
					INVOKE putstring, ADDR strPromptExit	;Display exit message to user
					INVOKE getch							;Hold screen until user hits enter
					INVOKE ExitProcess, 0					;Exit the program
 000000D5			ExitProgram ENDP							;END ExitProgram

				END											;END CODE
Microsoft (R) Macro Assembler Version 6.14.8444		    04/13/17 23:16:48
MASM3.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000068C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000D5 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProgram  . . . . . . . . . .	P Near	 000000BF _TEXT	Length= 00000016 Public
TestString_equals  . . . . . . .	P Near	 00000067 _TEXT	Length= 00000058 Public
TestString_length  . . . . . . .	P Near	 0000001E _TEXT	Length= 00000049 Public
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getche . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
COMMA_KEY  . . . . . . . . . . .	Number	 0000002Ch   
ENTER_KEY  . . . . . . . . . . .	Number	 0000000Dh   
STR_MAX  . . . . . . . . . . . .	Number	 0000001Eh   
String_equalsIgnoreCase  . . . .	L Near	 00000000 FLAT	External
String_equals  . . . . . . . . .	L Near	 00000000 FLAT	External
String_length  . . . . . . . . .	L Near	 00000000 FLAT	External
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
dReturnedVal . . . . . . . . . .	DWord	 00000099 _DATA	
iTestValsLength  . . . . . . . .	DWord	 00000043 _DATA	
numValTemp1  . . . . . . . . . .	DWord	 00000091 _DATA	
numValTemp2  . . . . . . . . . .	DWord	 00000095 _DATA	
strInfoEqualsICUML . . . . . . .	Byte	 0000032C _DATA	
strInfoStrCharAtUML  . . . . . .	Byte	 000004FB _DATA	
strInfoStrCopyUML  . . . . . . .	Byte	 0000039D _DATA	
strInfoStrEndsWithUML  . . . . .	Byte	 00000649 _DATA	
strInfoStrEndsWith . . . . . . .	Byte	 0000061A _DATA	
strInfoStrEqualsUML  . . . . . .	Byte	 000002B9 _DATA	
strInfoStrLengthUML  . . . . . .	Byte	 0000026A _DATA	
strInfoStrStartsWith1UML . . . .	Byte	 00000564 _DATA	
strInfoStrStartsWith1  . . . . .	Byte	 00000532 _DATA	
strInfoStrStartsWith2UML . . . .	Byte	 000005DC _DATA	
strInfoStrStartsWith2  . . . . .	Byte	 000005A9 _DATA	
strInfoSubstr1UML  . . . . . . .	Byte	 0000041D _DATA	
strInfoSubstr1 . . . . . . . . .	Byte	 000003EB _DATA	
strInfoSubstr2UML  . . . . . . .	Byte	 00000495 _DATA	
strInfoSubstr2 . . . . . . . . .	Byte	 00000463 _DATA	
strInfoTestEqualsIC  . . . . . .	Byte	 000002F5 _DATA	
strInfoTestStrCharAt . . . . . .	Byte	 000004CE _DATA	
strInfoTestStrCopy . . . . . . .	Byte	 00000372 _DATA	
strInfoTestStrEquals . . . . . .	Byte	 0000028C _DATA	
strInfoTestStrLength . . . . . .	Byte	 0000023D _DATA	
strNewline . . . . . . . . . . .	Byte	 00000131 _DATA	
strOutput  . . . . . . . . . . .	DWord	 0000000E _DATA	
strPromptExit  . . . . . . . . .	Byte	 000000A6 _DATA	
strPromptRepeat  . . . . . . . .	Byte	 000000EB _DATA	
strRandomSHit  . . . . . . . . .	Byte	 00000680 _DATA	
strReportAuthorInfo  . . . . . .	Byte	 00000133 _DATA	
strReportChar  . . . . . . . . .	Byte	 00000229 _DATA	
strReportClass . . . . . . . . .	Byte	 00000150 _DATA	
strReportDate  . . . . . . . . .	Byte	 00000184 _DATA	
strReportEAX . . . . . . . . . .	Byte	 000001D9 _DATA	
strReportInt . . . . . . . . . .	Byte	 00000215 _DATA	
strReportLab . . . . . . . . . .	Byte	 00000165 _DATA	
strReportRtrnChar  . . . . . . .	Byte	 00000201 _DATA	
strReportStr1  . . . . . . . . .	Byte	 0000019B _DATA	
strReportStr2  . . . . . . . . .	Byte	 000001B1 _DATA	
strReportStrEAX  . . . . . . . .	Byte	 000001ED _DATA	
strReportnum . . . . . . . . . .	Byte	 000001C5 _DATA	
strReturnedVal . . . . . . . . .	Byte	 0000009D _DATA	
strTest1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
strTest2 . . . . . . . . . . . .	Byte	 00000007 _DATA	
strTestVals  . . . . . . . . . .	Byte	 00000012 _DATA	
strValTemp1  . . . . . . . . . .	Byte	 00000047 _DATA	
strValTemp2  . . . . . . . . . .	Byte	 00000066 _DATA	
strValTemp3  . . . . . . . . . .	Byte	 00000085 _DATA	

	   0 Warnings
	   0 Errors
